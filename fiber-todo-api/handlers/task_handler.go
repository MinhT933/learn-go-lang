package handlers

import (
	"fiber-todo-api/database"
	"fiber-todo-api/models"

	"github.com/gofiber/fiber/v2"
)

//h√†m n√†y nh·∫≠n v·ªÅ m·ªôt c*fiber.Ctx ==> c*fiber.Ctx l√† c√°i g√¨ ?????? ü§î
// n√≥ l√† context c·ªßa Fiber d√πng ƒë·ªÉ x·ª≠ l√Ω request/response
// gi·∫£ s·ª≠ c√≥ m·ªôt c·ª≠a h√†n b√°n b√°nh onl ai mu·ªën mua g√¨ c≈©ng ph·∫£i ƒë·∫∑t h√†ng qua t·ªù th√¥ng tin ==> t·ªù th√¥ng tin ·∫•y ƒë√¢y ch√≠nh l√† c*fibe.Ctx
// n√≥ bao g·ªìm nh·ªØng th√¥ng tin c·∫ßn thi·∫øt nh∆∞ ƒë·ªãnh danh, lo·∫°i b√°nh m√¨, ƒë·ªãa ch·ªâ,.....

// c.Body()	ƒê·ªçc n·ªôi dung th∆∞ h·ªç g·ª≠i
// c.Params("id")	H·ªç ghi m√£ ƒë∆°n h√†ng trong phong b√¨
// c.Query("search")	T√¨m ki·∫øm h·ªç mu·ªën g√¨ trong m·∫´u ƒë∆°n
// c.FormFile("file")	H·ªç ƒë√≠nh k√®m m·ªôt t·∫•m ·∫£nh trong th∆∞
// c.JSON(...)	G·ª≠i l·∫°i cho h·ªç m·ªôt l√° th∆∞ ph·∫£n h·ªìi (tr·∫£ k·∫øt qu·∫£)

// GetAllTasks godoc
// @Summary L·∫•y danh s√°ch t·∫•t c·∫£ c√¥ng vi·ªác
// @Description Tr·∫£ v·ªÅ danh s√°ch task hi·ªán c√≥
// @Tags tasks
// @Produce json
// @Success 200 {array} models.Task
// @Router /tasks [get]
func GetAllTasks(c *fiber.Ctx) error {
  var tasks []models.Task
  database.DB.Find(&tasks)
  return c.JSON(tasks)
}

// CreateTask godoc
// @Summary T·∫°o c√¥ng vi·ªác m·ªõi
// @Description T·∫°o task m·ªõi v·ªõi JSON
// @Tags tasks
// @Accept json
// @Produce json
// @Param task body models.Task true "Task"
// @Success 201 {object} models.Task
// @Failure 400 {object} map[string]interface{}
// @Router /tasks [post]
func CreateTask(c *fiber.Ctx) error {
	var task models.Task
	if err:= c.BodyParser(&task); err != nil {
		return c.Status(400).JSON(fiber.Map{"error":"D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá"})
	}
	database.DB.Create(&task)
	return c.Status(201).JSON(task)
}


// @Sumary
// @Tags tasks
// @Description  Tr·∫£ v·ªÅ m·ªôt task duy nh·∫•t d·ª±a tr√™n ID
// @Accept json
// @Produce json
// @Param id path int true "ID c·ªßa task"
// @Success 200 {object} models.Task
// @Failure 404 {object} models.ErrorResponse
// @Router /Tasks/{id} [get]
func GetTaskByID(c *fiber.Ctx ) error {
  id := c.Params("id")

  var task models.Task
  result := database.DB.First(&task, id)

  if result.Error != nil {
	return c.Status(404).JSON(models.ErrorResponse {
		Error: "Task kh√¥ng t·ªìn t·∫°i",
	})
  }

  return  c.JSON(task)
}


// @Summary
// @Tags tasks
// @Description
// @Accept json
// @Produce json
// @Param id path int true "ID c·ªßa task"
// @Success 200 {object} models.Task
// @Failure 404 {object} models.ErrorResponse
// @Router /Tasks/{id} [delete]
func DeleteTaskByID(c *fiber.Ctx) error {
	id := c.Params("id")

	var task models.Task

	// ‚úÖ B∆∞·ªõc 1: ki·ªÉm tra xem c√≥ t·ªìn t·∫°i kh√¥ng
	if err := database.DB.First(&task, id).Error; err != nil {
		return c.Status(404).JSON(models.ErrorResponse{
			Error: "Task kh√¥ng t·ªìn t·∫°i",
		})
	}

	// ‚úÖ B∆∞·ªõc 2: n·∫øu t·ªìn t·∫°i, xo√° n√≥
	database.DB.Delete(&task)

	// ‚úÖ Tr·∫£ v·ªÅ task v·ª´a xo√°
	return c.JSON(task)
}

// UpdateTaskByID godoc
// @Summary C·∫≠p nh·∫≠t c√¥ng vi·ªác theo ID
// @Description Nh·∫≠n JSON v√† c·∫≠p nh·∫≠t n·ªôi dung task
// @Tags tasks
// @Accept json
// @Produce json
// @Param id path int true "ID c·ªßa task"
// @Param task body models.Task true "Task c·∫ßn c·∫≠p nh·∫≠t"
// @Success 200 {object} models.Task
// @Failure 400 {object} models.ErrorResponse
// @Failure 404 {object} models.ErrorResponse
// @Router /tasks/{id} [put]
func UpdateTaskByID(c *fiber.Ctx) error {
	id := c.Params("id")

	var task models.Task
	if err := database.DB.First(&task, id).Error; err != nil {
		return c.Status(404).JSON(models.ErrorResponse{
			Error: "Task kh√¥ng t·ªìn t·∫°i",
		})
	}

	// ‚úÖ D√πng bi·∫øn t·∫°m ƒë·ªÉ parse d·ªØ li·ªáu t·ª´ body
	var updatedData struct {
		Title string `json:"title"`
		Done  bool   `json:"done"`
	}

	if err := c.BodyParser(&updatedData); err != nil {
		return c.Status(400).JSON(models.ErrorResponse{
			Error: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá",
		})
	}

	// ‚úÖ C·∫≠p nh·∫≠t t·ª´ng field (kh√¥ng ƒë·ª•ng v√†o ID)
	task.Title = updatedData.Title
	task.Done = updatedData.Done

	database.DB.Save(&task)

	return c.JSON(task)
}
